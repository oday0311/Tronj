/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import org.tron.tronj.abi.FunctionEncoder;
import org.tron.tronj.abi.FunctionReturnDecoder;
import org.tron.tronj.abi.TypeReference;
import org.tron.tronj.abi.datatypes.generated.Bytes10;
import org.tron.tronj.abi.datatypes.generated.Uint256;
import org.tron.tronj.abi.datatypes.generated.Uint32;
import org.tron.tronj.abi.datatypes.*;
import org.tron.tronj.client.contract.Contract;
import org.tron.tronj.client.contract.ContractFunction;
import org.tron.tronj.client.Transaction.TransactionBuilder;
import org.tron.tronj.client.TronClient;
import org.tron.tronj.proto.Chain.Transaction;
import org.tron.tronj.proto.Contract.TriggerSmartContract;
import org.tron.tronj.proto.Response.BlockExtention;
import org.tron.tronj.proto.Response.BlockListExtention;
import org.tron.tronj.proto.Response.TransactionExtention;
import org.tron.tronj.proto.Response.TransactionReturn;

import java.math.BigInteger;
import java.util.*;
import org.tron.tronj.proto.Chain.Block;
import org.tron.tronj.proto.Chain.BlockHeader;

public class App {
    public String encodeFunctionCalling() {
        System.out.println("! function sam(bytes _, bool _, address _, uint[])");
        Function function = new Function("sam",
                Arrays.asList(new DynamicBytes("dave".getBytes()), new Bool(true),
                        new Address("T9yKC9LCoVvmhaFxKcdK9iL18TUWtyFtjh"),
                        new DynamicArray<>(
                                new Uint(BigInteger.ONE), new Uint(BigInteger.valueOf(2)), new Uint(BigInteger.valueOf(3)))),
                Collections.emptyList());
        String encodedHex = FunctionEncoder.encode(function);
        return encodedHex;
    }

    public void decodeFunctionReturn() {
        Function function = new Function("test", Collections.<Type>emptyList(),
                Arrays.asList(new TypeReference<Uint>() {
                }, new TypeReference<Address>() {
                }));

        List<Type> outputs =
                FunctionReturnDecoder.decode("0000000000000000000000000000000000000000000000000000000000000037"
                                + "00000000000000000000000028263f17875e4f277a72f6c6910bb7a692108b3e",
                        function.getOutputParameters());
        for (Type obj : outputs) {
            System.out.println(obj.getTypeAsString() + "  " + obj.toString());
            if (Uint.class.isInstance(obj)) {
                System.out.println("  parsed value => " + ((Uint) obj).getValue());
            }
        }
        // assertEquals(outputs,
        //    (Arrays.asList(new Uint(BigInteger.valueOf(55)), new Uint(BigInteger.valueOf(7)))));
    }

    /*public void signTransaction() {
        System.out.println("============= signTransaction =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.signTransaction(, 1_000_000L, 3L,1);
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }*/

    public void trc20Encode() {
        Function trc20Transfer = new Function("transfer",
                Arrays.asList(new Address("TV3KSjZHF4o6bC92SMrjhNJ3RE65xHNDuo"),
                        new Uint256(BigInteger.valueOf(1000).multiply(BigInteger.valueOf(10).pow(18)))),
                Arrays.asList(new TypeReference<Bool>() {
                }));

        String encodedHex = FunctionEncoder.encode(trc20Transfer);
        System.out.println("! encoding a TRC20 transfer");
        System.out.println(encodedHex);
    }

    public void sendTrx() {
        System.out.println("============= TRC transfer =============");
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.transfer("TJRabPrwbZy45sbavfcjinPJC18kjpRTv8", "TVjsyZ7fYF3qLF6BQgPmTEZy1xrNNyVAAA", 2_000_000);
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void freezeBalance() {
        System.out.println("============= freeze balance =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.freezeBalance("TJRabPrwbZy45sbavfcjinPJC18kjpRTv8", 1_000_000L, 3L,1);
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void unFreezeBalance() {
        System.out.println("============= unFreeze balance =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        int resourceCode = 0;

        try {
            client.unfreezeBalance("TJRabPrwbZy45sbavfcjinPJC18kjpRTv8", 1);
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getBlockByNum() {
        System.out.println("============= getBlockByNum =============");
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            Block block = client.getBlockByNum(1);
            System.out.println(block);
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getNowBlock() {
        System.out.println("============= getNowBlock =============");
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            System.out.println(client.getNowBlock());
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getNowBlockSolidity() {
        System.out.println("============= getNowBlockSolidity =============");
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            System.out.println(client.getNowBlockSolidity());
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getNodeInfo() {
        System.out.println("============= getNodeInfo=============");
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.getNodeInfo();
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void listNodes() {
        System.out.println("============= listNodes=============");
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.listNodes();
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getTransactionInfoByBlockNum() {
        System.out.println("============= getTransactionInfoByBlockNum =============");
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.getTransactionInfoByBlockNum(800000000);
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }
          
    // public void sendTrc20Transaction() {
    //     System.out.println("============ TRC20 transfer =============");
    //     // Any of `ofShasta`, `ofMainnet`.
    //     TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");

    //     // transfer(address _to,uint256 _amount) returns (bool)
    //     // _to = TVjsyZ7fYF3qLF6BQgPmTEZy1xrNNyVAAA
    //     // _amount = 10 * 10^18
    //     Function trc20Transfer = new Function("transfer",
    //         Arrays.asList(new Address("TVjsyZ7fYF3qLF6BQgPmTEZy1xrNNyVAAA"),
    //             new Uint256(BigInteger.valueOf(10).multiply(BigInteger.valueOf(10).pow(18)))),
    //         Arrays.asList(new TypeReference<Bool>() {}));

    //     String encodedHex = FunctionEncoder.encode(trc20Transfer);
    //     TriggerSmartContract trigger =
    //         TriggerSmartContract.newBuilder()
    //             .setOwnerAddress(TronClient.parseAddress("TJRabPrwbZy45sbavfcjinPJC18kjpRTv8"))
    //             .setContractAddress(TronClient.parseAddress("TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3")) // JST
    //             .setData(TronClient.parseHex(encodedHex))
    //             .build();

    //     System.out.println("trigger:\n" + trigger);

    //     TransactionExtention txnExt = client.blockingStub.triggerContract(trigger);
    //     System.out.println("txn id => " + TronClient.toHex(txnExt.getTxid().toByteArray()));

    //     Transaction unsignedTxn = txnExt.getTransaction.toBuilder()
    //         .setRawData(txnExt.getTransaction().getRawData().toBuilder().setFeeLimit(10000000L))
    //         .build();

    //     Transaction signedTxn = client.signTransaction(unsignedTxn);

    //     System.out.println(signedTxn.toString());
    //     TransactionReturn ret = client.blockingStub.broadcastTransaction(signedTxn);
    //     System.out.println("======== Result ========\n" + ret.toString());
    // }


    public void getSmartContract() {
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
           
            Contract cntr = client.getContract("THi2qJf6XmvTJSpZHc17HgQsmJop6kb3ia");
            System.out.println("Contract name: " + cntr.getName());
            // System.out.println("Contract ABI: " + cntr.getAbi());
            System.out.println("Contract functions: " + cntr.getFunctions().size());
            for (ContractFunction cf : cntr.getFunctions()) {
                System.out.println(cf.toString());
            }
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getTransactionInfoById() {
        System.out.println("============= getTransactionInfoById =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.getTransactionInfoById("aeae4cfa252b72566e7c77a6274d35c3a1526804215f949c46bbea06e252d8da");
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getTransactionByIdSolidity() {
        System.out.println("============= getTransactionByIdSolidity =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            System.out.println(client.getTransactionByIdSolidity("3535304212e0090d421ec88cd194d35875b748c0ad453fcde6d7b4d43e852ced"));
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    /**
     * This is a constant call demo
     */
    public void viewContractName() {
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            Function viewName = new Function("name", Collections.emptyList(), Collections.emptyList());
            TransactionExtention txnExt = client.constantCall("TJRabPrwbZy45sbavfcjinPJC18kjpRTv8", "TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3", viewName);
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }


    public void getAccount(){
        System.out.println("============= getAccount =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.getAccount("415CBDD86A2FA8DC4BDDD8A8F69DBA48572EEC07FB");
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getAccountSolidity(){
        System.out.println("============= getAccountSolidity =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            System.out.println(client.getAccountSolidity("TKwVM5tsELuTE3a5SUCWiQyVtEgxejL5Wj"));
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void getRewardSolidity(){
        System.out.println("============= getRewardSolidity =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            System.out.println(client.getRewardSolidity("TNSdGcMvSDwksounpkN1ZCmA7V5QLEDtWu"));
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }


    public void listWitnesses(){
        System.out.println("============= listWitnesses =============");
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            client.listWitnesses();
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    public void voteWitness(){
        System.out.println("============= voteWitness =============");
        TronClient client = TronClient.ofShasta("3333333333333333333333333333333333333333333333333333333333333333");
        HashMap<String, String> witness = new HashMap<>();
        witness.put("41F16412B9A17EE9408646E2A21E16478F72ED1E95","-1");
        try {
            client.voteWitness("TJRabPrwbZy45sbavfcjinPJC18kjpRTv8",witness);
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }

    /**
     * This is a trigger call - transfer trc-20 demo
     */
    public void triggerCallDemo() {
        TronClient client = TronClient.ofNile("3333333333333333333333333333333333333333333333333333333333333333");
        try {
            //function 'transfer'
            //params: function name, function params
            Function trc20Transfer = new Function("transfer",
            Arrays.asList(new Address("TVjsyZ7fYF3qLF6BQgPmTEZy1xrNNyVAAA"),
                new Uint256(BigInteger.valueOf(10L).multiply(BigInteger.valueOf(10).pow(18)))),
            Arrays.asList(new TypeReference<Bool>() {}));

            //the params are: owner address, contract address, function
            TransactionBuilder builder = client.triggerCall("TJRabPrwbZy45sbavfcjinPJC18kjpRTv8", "TF17BgPaZYbz8oxbjhriubPDsA7ArKoLX3", trc20Transfer); //JST
            //set extra params
            builder.setFeeLimit(100000000L);
            builder.setMemo("Let's go!");
            //sign transaction
            Transaction signedTxn = client.signTransaction(builder.build());
            System.out.println(signedTxn.toString());
            //broadcast transaction
            TransactionReturn ret = client.broadcastTransaction(signedTxn);
            System.out.println("======== Result ========\n" + ret.toString());
        } catch (Exception e) {
            System.out.println("error: " + e);
        }
    }


    public static void main(String[] args) {
        App app = new App();
//        System.out.println(app.encodeFunctionCalling());
//        app.decodeFunctionReturn();
//        app.signTransaction();
//        app.trc20Encode();
//        app.sendTrx();
//        app.sendTrc20();
//        app.freezeBalance();
//        app.unFreezeBalance();
//        app.getBlockByNum();
//        app.getNowBlock();
//        app.getNodeInfo();
//        app.listNodes();
//        app.getTransactionInfoByBlockNum();
//        app.getTransactionInfoById();
//        app.getAccount();
//        app.getAccountSolidity();
//        app.listWitnesses();
    //    app.getAccount();
        // app.listWitnesses();
//        app.voteWitness();
      // app.transferTrc20();
        app.getSmartContract();
        // app.viewContractName();
       app.triggerCallDemo();
//        app.getAccountSolidity();
        // app.getTransactionByIdSolidity();
    }
}
